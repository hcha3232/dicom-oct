{
  "version": 3,
  "sources": ["../../node_modules/@cornerstonejs/dicom-image-loader/dist/esm/codecs/jpeg.js"],
  "sourcesContent": ["var ColorSpace = { Unkown: 0, Grayscale: 1, AdobeRGB: 2, RGB: 3, CYMK: 4 };\nvar dctZigZag = new Int32Array([\n    0, 1, 8, 16, 9, 2, 3, 10, 17, 24, 32, 25, 18, 11, 4, 5, 12, 19, 26, 33, 40,\n    48, 41, 34, 27, 20, 13, 6, 7, 14, 21, 28, 35, 42, 49, 56, 57, 50, 43, 36, 29,\n    22, 15, 23, 30, 37, 44, 51, 58, 59, 52, 45, 38, 31, 39, 46, 53, 60, 61, 54,\n    47, 55, 62, 63,\n]);\nvar dctCos1 = 4017;\nvar dctSin1 = 799;\nvar dctCos3 = 3406;\nvar dctSin3 = 2276;\nvar dctCos6 = 1567;\nvar dctSin6 = 3784;\nvar dctSqrt2 = 5793;\nvar dctSqrt1d2 = 2896;\nfunction buildHuffmanTable(codeLengths, values) {\n    var k = 0, code = [], i, j, length = 16;\n    while (length > 0 && !codeLengths[length - 1])\n        length--;\n    code.push({ children: [], index: 0 });\n    var p = code[0], q;\n    for (i = 0; i < length; i++) {\n        for (j = 0; j < codeLengths[i]; j++) {\n            p = code.pop();\n            p.children[p.index] = values[k];\n            while (p.index > 0) {\n                p = code.pop();\n            }\n            p.index++;\n            code.push(p);\n            while (code.length <= i) {\n                code.push((q = { children: [], index: 0 }));\n                p.children[p.index] = q.children;\n                p = q;\n            }\n            k++;\n        }\n        if (i + 1 < length) {\n            code.push((q = { children: [], index: 0 }));\n            p.children[p.index] = q.children;\n            p = q;\n        }\n    }\n    return code[0].children;\n}\nfunction getBlockBufferOffset(component, row, col) {\n    return 64 * ((component.blocksPerLine + 1) * row + col);\n}\nfunction decodeScan(data, offset, frame, components, resetInterval, spectralStart, spectralEnd, successivePrev, successive) {\n    var precision = frame.precision;\n    var samplesPerLine = frame.samplesPerLine;\n    var scanLines = frame.scanLines;\n    var mcusPerLine = frame.mcusPerLine;\n    var progressive = frame.progressive;\n    var maxH = frame.maxH, maxV = frame.maxV;\n    var startOffset = offset, bitsData = 0, bitsCount = 0;\n    function readBit() {\n        if (bitsCount > 0) {\n            bitsCount--;\n            return (bitsData >> bitsCount) & 1;\n        }\n        bitsData = data[offset++];\n        if (bitsData == 0xff) {\n            var nextByte = data[offset++];\n            if (nextByte) {\n                throw 'unexpected marker: ' + ((bitsData << 8) | nextByte).toString(16);\n            }\n        }\n        bitsCount = 7;\n        return bitsData >>> 7;\n    }\n    function decodeHuffman(tree) {\n        var node = tree;\n        var bit;\n        while ((bit = readBit()) !== null) {\n            node = node[bit];\n            if (typeof node === 'number')\n                return node;\n            if (typeof node !== 'object')\n                throw 'invalid huffman sequence';\n        }\n        return null;\n    }\n    function receive(length) {\n        var n = 0;\n        while (length > 0) {\n            var bit = readBit();\n            if (bit === null)\n                return;\n            n = (n << 1) | bit;\n            length--;\n        }\n        return n;\n    }\n    function receiveAndExtend(length) {\n        var n = receive(length);\n        if (n >= 1 << (length - 1))\n            return n;\n        return n + (-1 << length) + 1;\n    }\n    function decodeBaseline(component, offset) {\n        var t = decodeHuffman(component.huffmanTableDC);\n        var diff = t === 0 ? 0 : receiveAndExtend(t);\n        component.blockData[offset] = component.pred += diff;\n        var k = 1;\n        while (k < 64) {\n            var rs = decodeHuffman(component.huffmanTableAC);\n            var s = rs & 15, r = rs >> 4;\n            if (s === 0) {\n                if (r < 15)\n                    break;\n                k += 16;\n                continue;\n            }\n            k += r;\n            var z = dctZigZag[k];\n            component.blockData[offset + z] = receiveAndExtend(s);\n            k++;\n        }\n    }\n    function decodeDCFirst(component, offset) {\n        var t = decodeHuffman(component.huffmanTableDC);\n        var diff = t === 0 ? 0 : receiveAndExtend(t) << successive;\n        component.blockData[offset] = component.pred += diff;\n    }\n    function decodeDCSuccessive(component, offset) {\n        component.blockData[offset] |= readBit() << successive;\n    }\n    var eobrun = 0;\n    function decodeACFirst(component, offset) {\n        if (eobrun > 0) {\n            eobrun--;\n            return;\n        }\n        var k = spectralStart, e = spectralEnd;\n        while (k <= e) {\n            var rs = decodeHuffman(component.huffmanTableAC);\n            var s = rs & 15, r = rs >> 4;\n            if (s === 0) {\n                if (r < 15) {\n                    eobrun = receive(r) + (1 << r) - 1;\n                    break;\n                }\n                k += 16;\n                continue;\n            }\n            k += r;\n            var z = dctZigZag[k];\n            component.blockData[offset + z] = receiveAndExtend(s) * (1 << successive);\n            k++;\n        }\n    }\n    var successiveACState = 0, successiveACNextValue;\n    function decodeACSuccessive(component, offset) {\n        var k = spectralStart, e = spectralEnd, r = 0;\n        while (k <= e) {\n            var z = dctZigZag[k];\n            switch (successiveACState) {\n                case 0:\n                    var rs = decodeHuffman(component.huffmanTableAC);\n                    var s = rs & 15;\n                    r = rs >> 4;\n                    if (s === 0) {\n                        if (r < 15) {\n                            eobrun = receive(r) + (1 << r);\n                            successiveACState = 4;\n                        }\n                        else {\n                            r = 16;\n                            successiveACState = 1;\n                        }\n                    }\n                    else {\n                        if (s !== 1)\n                            throw 'invalid ACn encoding';\n                        successiveACNextValue = receiveAndExtend(s);\n                        successiveACState = r ? 2 : 3;\n                    }\n                    continue;\n                case 1:\n                case 2:\n                    if (component.blockData[offset + z]) {\n                        component.blockData[offset + z] += readBit() << successive;\n                    }\n                    else {\n                        r--;\n                        if (r === 0)\n                            successiveACState = successiveACState == 2 ? 3 : 0;\n                    }\n                    break;\n                case 3:\n                    if (component.blockData[offset + z]) {\n                        component.blockData[offset + z] += readBit() << successive;\n                    }\n                    else {\n                        component.blockData[offset + z] =\n                            successiveACNextValue << successive;\n                        successiveACState = 0;\n                    }\n                    break;\n                case 4:\n                    if (component.blockData[offset + z]) {\n                        component.blockData[offset + z] += readBit() << successive;\n                    }\n                    break;\n            }\n            k++;\n        }\n        if (successiveACState === 4) {\n            eobrun--;\n            if (eobrun === 0)\n                successiveACState = 0;\n        }\n    }\n    function decodeMcu(component, decode, mcu, row, col) {\n        var mcuRow = (mcu / mcusPerLine) | 0;\n        var mcuCol = mcu % mcusPerLine;\n        var blockRow = mcuRow * component.v + row;\n        var blockCol = mcuCol * component.h + col;\n        var offset = getBlockBufferOffset(component, blockRow, blockCol);\n        decode(component, offset);\n    }\n    function decodeBlock(component, decode, mcu) {\n        var blockRow = (mcu / component.blocksPerLine) | 0;\n        var blockCol = mcu % component.blocksPerLine;\n        var offset = getBlockBufferOffset(component, blockRow, blockCol);\n        decode(component, offset);\n    }\n    var componentsLength = components.length;\n    var component, i, j, k, n;\n    var decodeFn;\n    if (progressive) {\n        if (spectralStart === 0)\n            decodeFn = successivePrev === 0 ? decodeDCFirst : decodeDCSuccessive;\n        else\n            decodeFn = successivePrev === 0 ? decodeACFirst : decodeACSuccessive;\n    }\n    else {\n        decodeFn = decodeBaseline;\n    }\n    var mcu = 0, marker;\n    var mcuExpected;\n    if (componentsLength == 1) {\n        mcuExpected = components[0].blocksPerLine * components[0].blocksPerColumn;\n    }\n    else {\n        mcuExpected = mcusPerLine * frame.mcusPerColumn;\n    }\n    if (!resetInterval) {\n        resetInterval = mcuExpected;\n    }\n    var h, v;\n    while (mcu < mcuExpected) {\n        for (i = 0; i < componentsLength; i++) {\n            components[i].pred = 0;\n        }\n        eobrun = 0;\n        if (componentsLength == 1) {\n            component = components[0];\n            for (n = 0; n < resetInterval; n++) {\n                decodeBlock(component, decodeFn, mcu);\n                mcu++;\n            }\n        }\n        else {\n            for (n = 0; n < resetInterval; n++) {\n                for (i = 0; i < componentsLength; i++) {\n                    component = components[i];\n                    h = component.h;\n                    v = component.v;\n                    for (j = 0; j < v; j++) {\n                        for (k = 0; k < h; k++) {\n                            decodeMcu(component, decodeFn, mcu, j, k);\n                        }\n                    }\n                }\n                mcu++;\n            }\n        }\n        bitsCount = 0;\n        marker = (data[offset] << 8) | data[offset + 1];\n        if (marker <= 0xff00) {\n            throw 'marker was not found';\n        }\n        if (marker >= 0xffd0 && marker <= 0xffd7) {\n            offset += 2;\n        }\n        else {\n            break;\n        }\n    }\n    return offset - startOffset;\n}\nfunction quantizeAndInverse(component, blockBufferOffset, p) {\n    var qt = component.quantizationTable;\n    var v0, v1, v2, v3, v4, v5, v6, v7, t;\n    var i;\n    for (i = 0; i < 64; i++) {\n        p[i] = component.blockData[blockBufferOffset + i] * qt[i];\n    }\n    for (i = 0; i < 8; ++i) {\n        var row = 8 * i;\n        if (p[1 + row] === 0 &&\n            p[2 + row] === 0 &&\n            p[3 + row] === 0 &&\n            p[4 + row] === 0 &&\n            p[5 + row] === 0 &&\n            p[6 + row] === 0 &&\n            p[7 + row] === 0) {\n            t = (dctSqrt2 * p[0 + row] + 512) >> 10;\n            p[0 + row] = t;\n            p[1 + row] = t;\n            p[2 + row] = t;\n            p[3 + row] = t;\n            p[4 + row] = t;\n            p[5 + row] = t;\n            p[6 + row] = t;\n            p[7 + row] = t;\n            continue;\n        }\n        v0 = (dctSqrt2 * p[0 + row] + 128) >> 8;\n        v1 = (dctSqrt2 * p[4 + row] + 128) >> 8;\n        v2 = p[2 + row];\n        v3 = p[6 + row];\n        v4 = (dctSqrt1d2 * (p[1 + row] - p[7 + row]) + 128) >> 8;\n        v7 = (dctSqrt1d2 * (p[1 + row] + p[7 + row]) + 128) >> 8;\n        v5 = p[3 + row] << 4;\n        v6 = p[5 + row] << 4;\n        t = (v0 - v1 + 1) >> 1;\n        v0 = (v0 + v1 + 1) >> 1;\n        v1 = t;\n        t = (v2 * dctSin6 + v3 * dctCos6 + 128) >> 8;\n        v2 = (v2 * dctCos6 - v3 * dctSin6 + 128) >> 8;\n        v3 = t;\n        t = (v4 - v6 + 1) >> 1;\n        v4 = (v4 + v6 + 1) >> 1;\n        v6 = t;\n        t = (v7 + v5 + 1) >> 1;\n        v5 = (v7 - v5 + 1) >> 1;\n        v7 = t;\n        t = (v0 - v3 + 1) >> 1;\n        v0 = (v0 + v3 + 1) >> 1;\n        v3 = t;\n        t = (v1 - v2 + 1) >> 1;\n        v1 = (v1 + v2 + 1) >> 1;\n        v2 = t;\n        t = (v4 * dctSin3 + v7 * dctCos3 + 2048) >> 12;\n        v4 = (v4 * dctCos3 - v7 * dctSin3 + 2048) >> 12;\n        v7 = t;\n        t = (v5 * dctSin1 + v6 * dctCos1 + 2048) >> 12;\n        v5 = (v5 * dctCos1 - v6 * dctSin1 + 2048) >> 12;\n        v6 = t;\n        p[0 + row] = v0 + v7;\n        p[7 + row] = v0 - v7;\n        p[1 + row] = v1 + v6;\n        p[6 + row] = v1 - v6;\n        p[2 + row] = v2 + v5;\n        p[5 + row] = v2 - v5;\n        p[3 + row] = v3 + v4;\n        p[4 + row] = v3 - v4;\n    }\n    for (i = 0; i < 8; ++i) {\n        var col = i;\n        if (p[1 * 8 + col] === 0 &&\n            p[2 * 8 + col] === 0 &&\n            p[3 * 8 + col] === 0 &&\n            p[4 * 8 + col] === 0 &&\n            p[5 * 8 + col] === 0 &&\n            p[6 * 8 + col] === 0 &&\n            p[7 * 8 + col] === 0) {\n            t = (dctSqrt2 * p[i + 0] + 8192) >> 14;\n            p[0 * 8 + col] = t;\n            p[1 * 8 + col] = t;\n            p[2 * 8 + col] = t;\n            p[3 * 8 + col] = t;\n            p[4 * 8 + col] = t;\n            p[5 * 8 + col] = t;\n            p[6 * 8 + col] = t;\n            p[7 * 8 + col] = t;\n            continue;\n        }\n        v0 = (dctSqrt2 * p[0 * 8 + col] + 2048) >> 12;\n        v1 = (dctSqrt2 * p[4 * 8 + col] + 2048) >> 12;\n        v2 = p[2 * 8 + col];\n        v3 = p[6 * 8 + col];\n        v4 = (dctSqrt1d2 * (p[1 * 8 + col] - p[7 * 8 + col]) + 2048) >> 12;\n        v7 = (dctSqrt1d2 * (p[1 * 8 + col] + p[7 * 8 + col]) + 2048) >> 12;\n        v5 = p[3 * 8 + col];\n        v6 = p[5 * 8 + col];\n        t = (v0 - v1 + 1) >> 1;\n        v0 = (v0 + v1 + 1) >> 1;\n        v1 = t;\n        t = (v2 * dctSin6 + v3 * dctCos6 + 2048) >> 12;\n        v2 = (v2 * dctCos6 - v3 * dctSin6 + 2048) >> 12;\n        v3 = t;\n        t = (v4 - v6 + 1) >> 1;\n        v4 = (v4 + v6 + 1) >> 1;\n        v6 = t;\n        t = (v7 + v5 + 1) >> 1;\n        v5 = (v7 - v5 + 1) >> 1;\n        v7 = t;\n        t = (v0 - v3 + 1) >> 1;\n        v0 = (v0 + v3 + 1) >> 1;\n        v3 = t;\n        t = (v1 - v2 + 1) >> 1;\n        v1 = (v1 + v2 + 1) >> 1;\n        v2 = t;\n        t = (v4 * dctSin3 + v7 * dctCos3 + 2048) >> 12;\n        v4 = (v4 * dctCos3 - v7 * dctSin3 + 2048) >> 12;\n        v7 = t;\n        t = (v5 * dctSin1 + v6 * dctCos1 + 2048) >> 12;\n        v5 = (v5 * dctCos1 - v6 * dctSin1 + 2048) >> 12;\n        v6 = t;\n        p[0 * 8 + col] = v0 + v7;\n        p[7 * 8 + col] = v0 - v7;\n        p[1 * 8 + col] = v1 + v6;\n        p[6 * 8 + col] = v1 - v6;\n        p[2 * 8 + col] = v2 + v5;\n        p[5 * 8 + col] = v2 - v5;\n        p[3 * 8 + col] = v3 + v4;\n        p[4 * 8 + col] = v3 - v4;\n    }\n    for (i = 0; i < 64; ++i) {\n        var index = blockBufferOffset + i;\n        var q = p[i];\n        q =\n            q <= -2056 / component.bitConversion\n                ? 0\n                : q >= 2024 / component.bitConversion\n                    ? 255 / component.bitConversion\n                    : (q + 2056 / component.bitConversion) >> 4;\n        component.blockData[index] = q;\n    }\n}\nfunction buildComponentData(frame, component) {\n    var lines = [];\n    var blocksPerLine = component.blocksPerLine;\n    var blocksPerColumn = component.blocksPerColumn;\n    var samplesPerLine = blocksPerLine << 3;\n    var computationBuffer = new Int32Array(64);\n    var i, j, ll = 0;\n    for (var blockRow = 0; blockRow < blocksPerColumn; blockRow++) {\n        for (var blockCol = 0; blockCol < blocksPerLine; blockCol++) {\n            var offset = getBlockBufferOffset(component, blockRow, blockCol);\n            quantizeAndInverse(component, offset, computationBuffer);\n        }\n    }\n    return component.blockData;\n}\nfunction clampToUint8(a) {\n    return a <= 0 ? 0 : a >= 255 ? 255 : a | 0;\n}\nclass JpegImage {\n    constructor() { }\n    load(path) {\n        var handleData = function (data) {\n            this.parse(data);\n            if (this.onload)\n                this.onload();\n        }.bind(this);\n        if (path.indexOf('data:') > -1) {\n            var offset = path.indexOf('base64,') + 7;\n            var data = atob(path.substring(offset));\n            var arr = new Uint8Array(data.length);\n            for (var i = data.length - 1; i >= 0; i--) {\n                arr[i] = data.charCodeAt(i);\n            }\n            handleData(data);\n        }\n        else {\n            var xhr = new XMLHttpRequest();\n            xhr.open('GET', path, true);\n            xhr.responseType = 'arraybuffer';\n            xhr.onload = function () {\n                var data = new Uint8Array(xhr.response);\n                handleData(data);\n            }.bind(this);\n            xhr.send(null);\n        }\n    }\n    parse(data) {\n        function readUint16() {\n            var value = (data[offset] << 8) | data[offset + 1];\n            offset += 2;\n            return value;\n        }\n        function readDataBlock() {\n            var length = readUint16();\n            var array = data.subarray(offset, offset + length - 2);\n            offset += array.length;\n            return array;\n        }\n        function prepareComponents(frame) {\n            var mcusPerLine = Math.ceil(frame.samplesPerLine / 8 / frame.maxH);\n            var mcusPerColumn = Math.ceil(frame.scanLines / 8 / frame.maxV);\n            for (var i = 0; i < frame.components.length; i++) {\n                component = frame.components[i];\n                var blocksPerLine = Math.ceil((Math.ceil(frame.samplesPerLine / 8) * component.h) / frame.maxH);\n                var blocksPerColumn = Math.ceil((Math.ceil(frame.scanLines / 8) * component.v) / frame.maxV);\n                var blocksPerLineForMcu = mcusPerLine * component.h;\n                var blocksPerColumnForMcu = mcusPerColumn * component.v;\n                var blocksBufferSize = 64 * blocksPerColumnForMcu * (blocksPerLineForMcu + 1);\n                component.blockData = new Int16Array(blocksBufferSize);\n                component.blocksPerLine = blocksPerLine;\n                component.blocksPerColumn = blocksPerColumn;\n            }\n            frame.mcusPerLine = mcusPerLine;\n            frame.mcusPerColumn = mcusPerColumn;\n        }\n        var offset = 0, length = data.length;\n        var jfif = null;\n        var adobe = null;\n        var pixels = null;\n        var frame, resetInterval;\n        var quantizationTables = [];\n        var huffmanTablesAC = [], huffmanTablesDC = [];\n        var fileMarker = readUint16();\n        if (fileMarker != 0xffd8) {\n            throw 'SOI not found';\n        }\n        fileMarker = readUint16();\n        while (fileMarker != 0xffd9) {\n            var i, j, l;\n            switch (fileMarker) {\n                case 0xffe0:\n                case 0xffe1:\n                case 0xffe2:\n                case 0xffe3:\n                case 0xffe4:\n                case 0xffe5:\n                case 0xffe6:\n                case 0xffe7:\n                case 0xffe8:\n                case 0xffe9:\n                case 0xffea:\n                case 0xffeb:\n                case 0xffec:\n                case 0xffed:\n                case 0xffee:\n                case 0xffef:\n                case 0xfffe:\n                    var appData = readDataBlock();\n                    if (fileMarker === 0xffe0) {\n                        if (appData[0] === 0x4a &&\n                            appData[1] === 0x46 &&\n                            appData[2] === 0x49 &&\n                            appData[3] === 0x46 &&\n                            appData[4] === 0) {\n                            jfif = {\n                                version: { major: appData[5], minor: appData[6] },\n                                densityUnits: appData[7],\n                                xDensity: (appData[8] << 8) | appData[9],\n                                yDensity: (appData[10] << 8) | appData[11],\n                                thumbWidth: appData[12],\n                                thumbHeight: appData[13],\n                                thumbData: appData.subarray(14, 14 + 3 * appData[12] * appData[13]),\n                            };\n                        }\n                    }\n                    if (fileMarker === 0xffee) {\n                        if (appData[0] === 0x41 &&\n                            appData[1] === 0x64 &&\n                            appData[2] === 0x6f &&\n                            appData[3] === 0x62 &&\n                            appData[4] === 0x65 &&\n                            appData[5] === 0) {\n                            adobe = {\n                                version: appData[6],\n                                flags0: (appData[7] << 8) | appData[8],\n                                flags1: (appData[9] << 8) | appData[10],\n                                transformCode: appData[11],\n                            };\n                        }\n                    }\n                    break;\n                case 0xffdb:\n                    var quantizationTablesLength = readUint16();\n                    var quantizationTablesEnd = quantizationTablesLength + offset - 2;\n                    while (offset < quantizationTablesEnd) {\n                        var quantizationTableSpec = data[offset++];\n                        var tableData = new Int32Array(64);\n                        if (quantizationTableSpec >> 4 === 0) {\n                            for (j = 0; j < 64; j++) {\n                                var z = dctZigZag[j];\n                                tableData[z] = data[offset++];\n                            }\n                        }\n                        else if (quantizationTableSpec >> 4 === 1) {\n                            for (j = 0; j < 64; j++) {\n                                var zz = dctZigZag[j];\n                                tableData[zz] = readUint16();\n                            }\n                        }\n                        else\n                            throw 'DQT: invalid table spec';\n                        quantizationTables[quantizationTableSpec & 15] = tableData;\n                    }\n                    break;\n                case 0xffc0:\n                case 0xffc1:\n                case 0xffc2:\n                    if (frame) {\n                        throw 'Only single frame JPEGs supported';\n                    }\n                    readUint16();\n                    frame = {};\n                    frame.extended = fileMarker === 0xffc1;\n                    frame.progressive = fileMarker === 0xffc2;\n                    frame.precision = data[offset++];\n                    frame.scanLines = readUint16();\n                    frame.samplesPerLine = readUint16();\n                    frame.components = [];\n                    frame.componentIds = {};\n                    var componentsCount = data[offset++], componentId;\n                    var maxH = 0, maxV = 0;\n                    for (i = 0; i < componentsCount; i++) {\n                        componentId = data[offset];\n                        var h = data[offset + 1] >> 4;\n                        var v = data[offset + 1] & 15;\n                        if (maxH < h)\n                            maxH = h;\n                        if (maxV < v)\n                            maxV = v;\n                        var qId = data[offset + 2];\n                        l = frame.components.push({\n                            h: h,\n                            v: v,\n                            quantizationTable: quantizationTables[qId],\n                            quantizationTableId: qId,\n                            bitConversion: 255 / ((1 << frame.precision) - 1),\n                        });\n                        frame.componentIds[componentId] = l - 1;\n                        offset += 3;\n                    }\n                    frame.maxH = maxH;\n                    frame.maxV = maxV;\n                    prepareComponents(frame);\n                    break;\n                case 0xffc4:\n                    var huffmanLength = readUint16();\n                    for (i = 2; i < huffmanLength;) {\n                        var huffmanTableSpec = data[offset++];\n                        var codeLengths = new Uint8Array(16);\n                        var codeLengthSum = 0;\n                        for (j = 0; j < 16; j++, offset++)\n                            codeLengthSum += codeLengths[j] = data[offset];\n                        var huffmanValues = new Uint8Array(codeLengthSum);\n                        for (j = 0; j < codeLengthSum; j++, offset++)\n                            huffmanValues[j] = data[offset];\n                        i += 17 + codeLengthSum;\n                        (huffmanTableSpec >> 4 === 0 ? huffmanTablesDC : huffmanTablesAC)[huffmanTableSpec & 15] = buildHuffmanTable(codeLengths, huffmanValues);\n                    }\n                    break;\n                case 0xffdd:\n                    readUint16();\n                    resetInterval = readUint16();\n                    break;\n                case 0xffda:\n                    var scanLength = readUint16();\n                    var selectorsCount = data[offset++];\n                    var components = [], component;\n                    for (i = 0; i < selectorsCount; i++) {\n                        var componentIndex = frame.componentIds[data[offset++]];\n                        component = frame.components[componentIndex];\n                        var tableSpec = data[offset++];\n                        component.huffmanTableDC = huffmanTablesDC[tableSpec >> 4];\n                        component.huffmanTableAC = huffmanTablesAC[tableSpec & 15];\n                        components.push(component);\n                    }\n                    var spectralStart = data[offset++];\n                    var spectralEnd = data[offset++];\n                    var successiveApproximation = data[offset++];\n                    var processed = decodeScan(data, offset, frame, components, resetInterval, spectralStart, spectralEnd, successiveApproximation >> 4, successiveApproximation & 15);\n                    offset += processed;\n                    break;\n                case 0xffff:\n                    if (data[offset] !== 0xff) {\n                        offset--;\n                    }\n                    break;\n                default:\n                    if (data[offset - 3] == 0xff &&\n                        data[offset - 2] >= 0xc0 &&\n                        data[offset - 2] <= 0xfe) {\n                        offset -= 3;\n                        break;\n                    }\n                    throw 'unknown JPEG marker ' + fileMarker.toString(16);\n            }\n            fileMarker = readUint16();\n        }\n        this.width = frame.samplesPerLine;\n        this.height = frame.scanLines;\n        this.jfif = jfif;\n        this.adobe = adobe;\n        this.components = [];\n        switch (frame.components.length) {\n            case 1:\n                this.colorspace = ColorSpace.Grayscale;\n                break;\n            case 3:\n                if (this.adobe)\n                    this.colorspace = ColorSpace.AdobeRGB;\n                else\n                    this.colorspace = ColorSpace.RGB;\n                break;\n            case 4:\n                this.colorspace = ColorSpace.CYMK;\n                break;\n            default:\n                this.colorspace = ColorSpace.Unknown;\n        }\n        for (var i = 0; i < frame.components.length; i++) {\n            var component = frame.components[i];\n            if (!component.quantizationTable &&\n                component.quantizationTableId !== null)\n                component.quantizationTable =\n                    quantizationTables[component.quantizationTableId];\n            this.components.push({\n                output: buildComponentData(frame, component),\n                scaleX: component.h / frame.maxH,\n                scaleY: component.v / frame.maxV,\n                blocksPerLine: component.blocksPerLine,\n                blocksPerColumn: component.blocksPerColumn,\n                bitConversion: component.bitConversion,\n            });\n        }\n    }\n    getData16(width, height) {\n        if (this.components.length !== 1)\n            throw 'Unsupported color mode';\n        var scaleX = this.width / width, scaleY = this.height / height;\n        var component, componentScaleX, componentScaleY;\n        var x, y, i;\n        var offset = 0;\n        var numComponents = this.components.length;\n        var dataLength = width * height * numComponents;\n        var data = new Uint16Array(dataLength);\n        var componentLine;\n        var lineData = new Uint16Array((this.components[0].blocksPerLine << 3) *\n            this.components[0].blocksPerColumn *\n            8);\n        for (i = 0; i < numComponents; i++) {\n            component = this.components[i];\n            var blocksPerLine = component.blocksPerLine;\n            var blocksPerColumn = component.blocksPerColumn;\n            var samplesPerLine = blocksPerLine << 3;\n            var j, k, ll = 0;\n            var lineOffset = 0;\n            for (var blockRow = 0; blockRow < blocksPerColumn; blockRow++) {\n                var scanLine = blockRow << 3;\n                for (var blockCol = 0; blockCol < blocksPerLine; blockCol++) {\n                    var bufferOffset = getBlockBufferOffset(component, blockRow, blockCol);\n                    var offset = 0, sample = blockCol << 3;\n                    for (j = 0; j < 8; j++) {\n                        var lineOffset = (scanLine + j) * samplesPerLine;\n                        for (k = 0; k < 8; k++) {\n                            lineData[lineOffset + sample + k] =\n                                component.output[bufferOffset + offset++];\n                        }\n                    }\n                }\n            }\n            componentScaleX = component.scaleX * scaleX;\n            componentScaleY = component.scaleY * scaleY;\n            offset = i;\n            var cx, cy;\n            var index;\n            for (y = 0; y < height; y++) {\n                for (x = 0; x < width; x++) {\n                    cy = 0 | (y * componentScaleY);\n                    cx = 0 | (x * componentScaleX);\n                    index = cy * samplesPerLine + cx;\n                    data[offset] = lineData[index];\n                    offset += numComponents;\n                }\n            }\n        }\n        return data;\n    }\n    getData(width, height) {\n        var scaleX = this.width / width, scaleY = this.height / height;\n        var component, componentScaleX, componentScaleY;\n        var x, y, i;\n        var offset = 0;\n        var Y, Cb, Cr, K, C, M, Ye, R, G, B;\n        var colorTransform;\n        var numComponents = this.components.length;\n        var dataLength = width * height * numComponents;\n        var data = new Uint8Array(dataLength);\n        var componentLine;\n        var lineData = new Uint8Array((this.components[0].blocksPerLine << 3) *\n            this.components[0].blocksPerColumn *\n            8);\n        for (i = 0; i < numComponents; i++) {\n            component = this.components[i];\n            var blocksPerLine = component.blocksPerLine;\n            var blocksPerColumn = component.blocksPerColumn;\n            var samplesPerLine = blocksPerLine << 3;\n            var j, k, ll = 0;\n            var lineOffset = 0;\n            for (var blockRow = 0; blockRow < blocksPerColumn; blockRow++) {\n                var scanLine = blockRow << 3;\n                for (var blockCol = 0; blockCol < blocksPerLine; blockCol++) {\n                    var bufferOffset = getBlockBufferOffset(component, blockRow, blockCol);\n                    var offset = 0, sample = blockCol << 3;\n                    for (j = 0; j < 8; j++) {\n                        var lineOffset = (scanLine + j) * samplesPerLine;\n                        for (k = 0; k < 8; k++) {\n                            lineData[lineOffset + sample + k] =\n                                component.output[bufferOffset + offset++] *\n                                    component.bitConversion;\n                        }\n                    }\n                }\n            }\n            componentScaleX = component.scaleX * scaleX;\n            componentScaleY = component.scaleY * scaleY;\n            offset = i;\n            var cx, cy;\n            var index;\n            for (y = 0; y < height; y++) {\n                for (x = 0; x < width; x++) {\n                    cy = 0 | (y * componentScaleY);\n                    cx = 0 | (x * componentScaleX);\n                    index = cy * samplesPerLine + cx;\n                    data[offset] = lineData[index];\n                    offset += numComponents;\n                }\n            }\n        }\n        switch (numComponents) {\n            case 1:\n            case 2:\n                break;\n            case 3:\n                colorTransform = true;\n                if (this.adobe && this.adobe.transformCode)\n                    colorTransform = true;\n                else if (typeof this.colorTransform !== 'undefined')\n                    colorTransform = !!this.colorTransform;\n                if (colorTransform) {\n                    for (i = 0; i < dataLength; i += numComponents) {\n                        Y = data[i];\n                        Cb = data[i + 1];\n                        Cr = data[i + 2];\n                        R = clampToUint8(Y - 179.456 + 1.402 * Cr);\n                        G = clampToUint8(Y + 135.459 - 0.344 * Cb - 0.714 * Cr);\n                        B = clampToUint8(Y - 226.816 + 1.772 * Cb);\n                        data[i] = R;\n                        data[i + 1] = G;\n                        data[i + 2] = B;\n                    }\n                }\n                break;\n            case 4:\n                if (!this.adobe)\n                    throw 'Unsupported color mode (4 components)';\n                colorTransform = false;\n                if (this.adobe && this.adobe.transformCode)\n                    colorTransform = true;\n                else if (typeof this.colorTransform !== 'undefined')\n                    colorTransform = !!this.colorTransform;\n                if (colorTransform) {\n                    for (i = 0; i < dataLength; i += numComponents) {\n                        Y = data[i];\n                        Cb = data[i + 1];\n                        Cr = data[i + 2];\n                        C = clampToUint8(434.456 - Y - 1.402 * Cr);\n                        M = clampToUint8(119.541 - Y + 0.344 * Cb + 0.714 * Cr);\n                        Y = clampToUint8(481.816 - Y - 1.772 * Cb);\n                        data[i] = C;\n                        data[i + 1] = M;\n                        data[i + 2] = Y;\n                    }\n                }\n                break;\n            default:\n                throw 'Unsupported color mode';\n        }\n        return data;\n    }\n}\nexport default JpegImage;\n"],
  "mappings": "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",
  "names": ["n", "component", "offset", "k", "mcu", "data", "length", "frame", "i"]
}
