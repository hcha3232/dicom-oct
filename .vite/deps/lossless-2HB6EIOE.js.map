{
  "version": 3,
  "sources": ["../../node_modules/jpeg-lossless-decoder-js/release/lossless.js"],
  "sourcesContent": ["var __defProp = Object.defineProperty;\nvar __export = (target, all) => {\n  for (var name in all)\n    __defProp(target, name, { get: all[name], enumerable: true });\n};\n\n// src/component-spec.ts\nvar ComponentSpec = {\n  hSamp: 0,\n  quantTableSel: 0,\n  vSamp: 0\n};\n\n// src/data-stream.ts\nvar DataStream = class {\n  buffer;\n  index;\n  constructor(data, offset, length) {\n    this.buffer = new Uint8Array(data, offset, length);\n    this.index = 0;\n  }\n  get16() {\n    const value = (this.buffer[this.index] << 8) + this.buffer[this.index + 1];\n    this.index += 2;\n    return value;\n  }\n  get8() {\n    const value = this.buffer[this.index];\n    this.index += 1;\n    return value;\n  }\n};\n\n// src/frame-header.ts\nvar FrameHeader = class {\n  dimX = 0;\n  dimY = 0;\n  numComp = 0;\n  precision = 0;\n  components = [];\n  read(data) {\n    let count = 0;\n    let temp;\n    const length = data.get16();\n    count += 2;\n    this.precision = data.get8();\n    count += 1;\n    this.dimY = data.get16();\n    count += 2;\n    this.dimX = data.get16();\n    count += 2;\n    this.numComp = data.get8();\n    count += 1;\n    for (let i = 1; i <= this.numComp; i += 1) {\n      if (count > length) {\n        throw new Error(\"ERROR: frame format error\");\n      }\n      const c = data.get8();\n      count += 1;\n      if (count >= length) {\n        throw new Error(\"ERROR: frame format error [c>=Lf]\");\n      }\n      temp = data.get8();\n      count += 1;\n      if (!this.components[c]) {\n        this.components[c] = { ...ComponentSpec };\n      }\n      this.components[c].hSamp = temp >> 4;\n      this.components[c].vSamp = temp & 15;\n      this.components[c].quantTableSel = data.get8();\n      count += 1;\n    }\n    if (count !== length) {\n      throw new Error(\"ERROR: frame format error [Lf!=count]\");\n    }\n    return 1;\n  }\n};\n\n// src/utils.ts\nvar utils_exports = {};\n__export(utils_exports, {\n  crc32: () => crc32,\n  crcTable: () => crcTable,\n  createArray: () => createArray,\n  makeCRCTable: () => makeCRCTable\n});\nvar createArray = (...dimensions) => {\n  if (dimensions.length > 1) {\n    const dim = dimensions[0];\n    const rest = dimensions.slice(1);\n    const newArray = [];\n    for (let i = 0; i < dim; i++) {\n      newArray[i] = createArray(...rest);\n    }\n    return newArray;\n  } else {\n    return Array(dimensions[0]).fill(void 0);\n  }\n};\nvar makeCRCTable = function() {\n  let c;\n  const crcTable2 = [];\n  for (let n = 0; n < 256; n++) {\n    c = n;\n    for (let k = 0; k < 8; k++) {\n      c = c & 1 ? 3988292384 ^ c >>> 1 : c >>> 1;\n    }\n    crcTable2[n] = c;\n  }\n  return crcTable2;\n};\nvar crcTable = makeCRCTable();\nvar crc32 = function(buffer) {\n  const uint8view = new Uint8Array(buffer);\n  let crc = 0 ^ -1;\n  for (let i = 0; i < uint8view.length; i++) {\n    crc = crc >>> 8 ^ crcTable[(crc ^ uint8view[i]) & 255];\n  }\n  return (crc ^ -1) >>> 0;\n};\n\n// src/huffman-table.ts\nvar HuffmanTable = class _HuffmanTable {\n  static MSB = 2147483648;\n  l;\n  th;\n  v;\n  tc;\n  constructor() {\n    this.l = createArray(4, 2, 16);\n    this.th = [0, 0, 0, 0];\n    this.v = createArray(4, 2, 16, 200);\n    this.tc = [\n      [0, 0],\n      [0, 0],\n      [0, 0],\n      [0, 0]\n    ];\n  }\n  read(data, HuffTab) {\n    let count = 0;\n    let temp;\n    let t;\n    let c;\n    let i;\n    let j;\n    const length = data.get16();\n    count += 2;\n    while (count < length) {\n      temp = data.get8();\n      count += 1;\n      t = temp & 15;\n      if (t > 3) {\n        throw new Error(\"ERROR: Huffman table ID > 3\");\n      }\n      c = temp >> 4;\n      if (c > 2) {\n        throw new Error(\"ERROR: Huffman table [Table class > 2 ]\");\n      }\n      this.th[t] = 1;\n      this.tc[t][c] = 1;\n      for (i = 0; i < 16; i += 1) {\n        this.l[t][c][i] = data.get8();\n        count += 1;\n      }\n      for (i = 0; i < 16; i += 1) {\n        for (j = 0; j < this.l[t][c][i]; j += 1) {\n          if (count > length) {\n            throw new Error(\"ERROR: Huffman table format error [count>Lh]\");\n          }\n          this.v[t][c][i][j] = data.get8();\n          count += 1;\n        }\n      }\n    }\n    if (count !== length) {\n      throw new Error(\"ERROR: Huffman table format error [count!=Lf]\");\n    }\n    for (i = 0; i < 4; i += 1) {\n      for (j = 0; j < 2; j += 1) {\n        if (this.tc[i][j] !== 0) {\n          this.buildHuffTable(HuffTab[i][j], this.l[i][j], this.v[i][j]);\n        }\n      }\n    }\n    return 1;\n  }\n  //\tBuild_HuffTab()\n  //\tParameter:  t       table ID\n  //\t            c       table class ( 0 for DC, 1 for AC )\n  //\t            L[i]    # of codewords which length is i\n  //\t            V[i][j] Huffman Value (length=i)\n  //\tEffect:\n  //\t    build up HuffTab[t][c] using L and V.\n  buildHuffTable(tab, L, V) {\n    let currentTable, k, i, j, n;\n    const temp = 256;\n    k = 0;\n    for (i = 0; i < 8; i += 1) {\n      for (j = 0; j < L[i]; j += 1) {\n        for (n = 0; n < temp >> i + 1; n += 1) {\n          tab[k] = V[i][j] | i + 1 << 8;\n          k += 1;\n        }\n      }\n    }\n    for (i = 1; k < 256; i += 1, k += 1) {\n      tab[k] = i | _HuffmanTable.MSB;\n    }\n    currentTable = 1;\n    k = 0;\n    for (i = 8; i < 16; i += 1) {\n      for (j = 0; j < L[i]; j += 1) {\n        for (n = 0; n < temp >> i - 7; n += 1) {\n          tab[currentTable * 256 + k] = V[i][j] | i + 1 << 8;\n          k += 1;\n        }\n        if (k >= 256) {\n          if (k > 256) {\n            throw new Error(\"ERROR: Huffman table error(1)!\");\n          }\n          k = 0;\n          currentTable += 1;\n        }\n      }\n    }\n  }\n};\n\n// src/quantization-table.ts\nvar QuantizationTable = class _QuantizationTable {\n  precision = [];\n  // Quantization precision 8 or 16\n  tq = [0, 0, 0, 0];\n  // 1: this table is presented\n  quantTables = createArray(4, 64);\n  // Tables\n  static enhanceQuantizationTable = function(qtab, table) {\n    for (let i = 0; i < 8; i += 1) {\n      qtab[table[0 * 8 + i]] *= 90;\n      qtab[table[4 * 8 + i]] *= 90;\n      qtab[table[2 * 8 + i]] *= 118;\n      qtab[table[6 * 8 + i]] *= 49;\n      qtab[table[5 * 8 + i]] *= 71;\n      qtab[table[1 * 8 + i]] *= 126;\n      qtab[table[7 * 8 + i]] *= 25;\n      qtab[table[3 * 8 + i]] *= 106;\n    }\n    for (let i = 0; i < 8; i += 1) {\n      qtab[table[0 + 8 * i]] *= 90;\n      qtab[table[4 + 8 * i]] *= 90;\n      qtab[table[2 + 8 * i]] *= 118;\n      qtab[table[6 + 8 * i]] *= 49;\n      qtab[table[5 + 8 * i]] *= 71;\n      qtab[table[1 + 8 * i]] *= 126;\n      qtab[table[7 + 8 * i]] *= 25;\n      qtab[table[3 + 8 * i]] *= 106;\n    }\n    for (let i = 0; i < 64; i += 1) {\n      qtab[i] >>= 6;\n    }\n  };\n  read(data, table) {\n    let count = 0;\n    let temp;\n    let t;\n    let i;\n    const length = data.get16();\n    count += 2;\n    while (count < length) {\n      temp = data.get8();\n      count += 1;\n      t = temp & 15;\n      if (t > 3) {\n        throw new Error(\"ERROR: Quantization table ID > 3\");\n      }\n      this.precision[t] = temp >> 4;\n      if (this.precision[t] === 0) {\n        this.precision[t] = 8;\n      } else if (this.precision[t] === 1) {\n        this.precision[t] = 16;\n      } else {\n        throw new Error(\"ERROR: Quantization table precision error\");\n      }\n      this.tq[t] = 1;\n      if (this.precision[t] === 8) {\n        for (i = 0; i < 64; i += 1) {\n          if (count > length) {\n            throw new Error(\"ERROR: Quantization table format error\");\n          }\n          this.quantTables[t][i] = data.get8();\n          count += 1;\n        }\n        _QuantizationTable.enhanceQuantizationTable(this.quantTables[t], table);\n      } else {\n        for (i = 0; i < 64; i += 1) {\n          if (count > length) {\n            throw new Error(\"ERROR: Quantization table format error\");\n          }\n          this.quantTables[t][i] = data.get16();\n          count += 2;\n        }\n        _QuantizationTable.enhanceQuantizationTable(this.quantTables[t], table);\n      }\n    }\n    if (count !== length) {\n      throw new Error(\"ERROR: Quantization table error [count!=Lq]\");\n    }\n    return 1;\n  }\n};\n\n// src/scan-component.ts\nvar ScanComponent = {\n  acTabSel: 0,\n  // AC table selector\n  dcTabSel: 0,\n  // DC table selector\n  scanCompSel: 0\n  // Scan component selector\n};\n\n// src/scan-header.ts\nvar ScanHeader = class {\n  ah = 0;\n  al = 0;\n  numComp = 0;\n  // Number of components in the scan\n  selection = 0;\n  // Start of spectral or predictor selection\n  spectralEnd = 0;\n  // End of spectral selection\n  components = [];\n  read(data) {\n    let count = 0;\n    let i;\n    let temp;\n    const length = data.get16();\n    count += 2;\n    this.numComp = data.get8();\n    count += 1;\n    for (i = 0; i < this.numComp; i += 1) {\n      this.components[i] = { ...ScanComponent };\n      if (count > length) {\n        throw new Error(\"ERROR: scan header format error\");\n      }\n      this.components[i].scanCompSel = data.get8();\n      count += 1;\n      temp = data.get8();\n      count += 1;\n      this.components[i].dcTabSel = temp >> 4;\n      this.components[i].acTabSel = temp & 15;\n    }\n    this.selection = data.get8();\n    count += 1;\n    this.spectralEnd = data.get8();\n    count += 1;\n    temp = data.get8();\n    this.ah = temp >> 4;\n    this.al = temp & 15;\n    count += 1;\n    if (count !== length) {\n      throw new Error(\"ERROR: scan header format error [count!=Ns]\");\n    }\n    return 1;\n  }\n};\n\n// src/decoder.ts\nvar littleEndian = function() {\n  const buffer = new ArrayBuffer(2);\n  new DataView(buffer).setInt16(\n    0,\n    256,\n    true\n    /* littleEndian */\n  );\n  return new Int16Array(buffer)[0] === 256;\n}();\nvar Decoder = class _Decoder {\n  static IDCT_P = [\n    0,\n    5,\n    40,\n    16,\n    45,\n    2,\n    7,\n    42,\n    21,\n    56,\n    8,\n    61,\n    18,\n    47,\n    1,\n    4,\n    41,\n    23,\n    58,\n    13,\n    32,\n    24,\n    37,\n    10,\n    63,\n    17,\n    44,\n    3,\n    6,\n    43,\n    20,\n    57,\n    15,\n    34,\n    29,\n    48,\n    53,\n    26,\n    39,\n    9,\n    60,\n    19,\n    46,\n    22,\n    59,\n    12,\n    33,\n    31,\n    50,\n    55,\n    25,\n    36,\n    11,\n    62,\n    14,\n    35,\n    28,\n    49,\n    52,\n    27,\n    38,\n    30,\n    51,\n    54\n  ];\n  static TABLE = [\n    0,\n    1,\n    5,\n    6,\n    14,\n    15,\n    27,\n    28,\n    2,\n    4,\n    7,\n    13,\n    16,\n    26,\n    29,\n    42,\n    3,\n    8,\n    12,\n    17,\n    25,\n    30,\n    41,\n    43,\n    9,\n    11,\n    18,\n    24,\n    31,\n    40,\n    44,\n    53,\n    10,\n    19,\n    23,\n    32,\n    39,\n    45,\n    52,\n    54,\n    20,\n    22,\n    33,\n    38,\n    46,\n    51,\n    55,\n    60,\n    21,\n    34,\n    37,\n    47,\n    50,\n    56,\n    59,\n    61,\n    35,\n    36,\n    48,\n    49,\n    57,\n    58,\n    62,\n    63\n  ];\n  static MAX_HUFFMAN_SUBTREE = 50;\n  static MSB = 2147483648;\n  static RESTART_MARKER_BEGIN = 65488;\n  static RESTART_MARKER_END = 65495;\n  buffer = null;\n  stream = null;\n  frame = new FrameHeader();\n  huffTable = new HuffmanTable();\n  quantTable = new QuantizationTable();\n  scan = new ScanHeader();\n  DU = createArray(10, 4, 64);\n  // at most 10 data units in a MCU, at most 4 data units in one component\n  HuffTab = createArray(4, 2, 50 * 256);\n  IDCT_Source = [];\n  nBlock = [];\n  // number of blocks in the i-th Comp in a scan\n  acTab = createArray(10, 1);\n  // ac HuffTab for the i-th Comp in a scan\n  dcTab = createArray(10, 1);\n  // dc HuffTab for the i-th Comp in a scan\n  qTab = createArray(10, 1);\n  // quantization table for the i-th Comp in a scan\n  marker = 0;\n  markerIndex = 0;\n  numComp = 0;\n  restartInterval = 0;\n  selection = 0;\n  xDim = 0;\n  yDim = 0;\n  xLoc = 0;\n  yLoc = 0;\n  outputData = null;\n  restarting = false;\n  mask = 0;\n  numBytes = 0;\n  precision = void 0;\n  components = [];\n  getter = null;\n  setter = null;\n  output = null;\n  selector = null;\n  /**\n   * The Decoder constructor.\n   * @property {number} numBytes - number of bytes per component\n   * @type {Function}\n   */\n  constructor(buffer, numBytes) {\n    this.buffer = buffer ?? null;\n    this.numBytes = numBytes ?? 0;\n  }\n  /**\n   * Returns decompressed data.\n   */\n  decompress(buffer, offset, length) {\n    const result = this.decode(buffer, offset, length);\n    return result.buffer;\n  }\n  decode(buffer, offset, length, numBytes) {\n    let scanNum = 0;\n    const pred = [];\n    let i;\n    let compN;\n    const temp = [];\n    const index = [];\n    let mcuNum;\n    if (buffer) {\n      this.buffer = buffer;\n    }\n    if (numBytes !== void 0) {\n      this.numBytes = numBytes;\n    }\n    this.stream = new DataStream(this.buffer, offset, length);\n    this.buffer = null;\n    this.xLoc = 0;\n    this.yLoc = 0;\n    let current = this.stream.get16();\n    if (current !== 65496) {\n      throw new Error(\"Not a JPEG file\");\n    }\n    current = this.stream.get16();\n    while (current >> 4 !== 4092 || current === 65476) {\n      switch (current) {\n        case 65476:\n          this.huffTable.read(this.stream, this.HuffTab);\n          break;\n        case 65484:\n          throw new Error(\"Program doesn't support arithmetic coding. (format throw new IOException)\");\n        case 65499:\n          this.quantTable.read(this.stream, _Decoder.TABLE);\n          break;\n        case 65501:\n          this.restartInterval = this.readNumber() ?? 0;\n          break;\n        case 65504:\n        case 65505:\n        case 65506:\n        case 65507:\n        case 65508:\n        case 65509:\n        case 65510:\n        case 65511:\n        case 65512:\n        case 65513:\n        case 65514:\n        case 65515:\n        case 65516:\n        case 65517:\n        case 65518:\n        case 65519:\n          this.readApp();\n          break;\n        case 65534:\n          this.readComment();\n          break;\n        default:\n          if (current >> 8 !== 255) {\n            throw new Error(\"ERROR: format throw new IOException! (decode)\");\n          }\n      }\n      current = this.stream.get16();\n    }\n    if (current < 65472 || current > 65479) {\n      throw new Error(\"ERROR: could not handle arithmetic code!\");\n    }\n    this.frame.read(this.stream);\n    current = this.stream.get16();\n    do {\n      while (current !== 65498) {\n        switch (current) {\n          case 65476:\n            this.huffTable.read(this.stream, this.HuffTab);\n            break;\n          case 65484:\n            throw new Error(\"Program doesn't support arithmetic coding. (format throw new IOException)\");\n          case 65499:\n            this.quantTable.read(this.stream, _Decoder.TABLE);\n            break;\n          case 65501:\n            this.restartInterval = this.readNumber() ?? 0;\n            break;\n          case 65504:\n          case 65505:\n          case 65506:\n          case 65507:\n          case 65508:\n          case 65509:\n          case 65510:\n          case 65511:\n          case 65512:\n          case 65513:\n          case 65514:\n          case 65515:\n          case 65516:\n          case 65517:\n          case 65518:\n          case 65519:\n            this.readApp();\n            break;\n          case 65534:\n            this.readComment();\n            break;\n          default:\n            if (current >> 8 !== 255) {\n              throw new Error(\"ERROR: format throw new IOException! (Parser.decode)\");\n            }\n        }\n        current = this.stream.get16();\n      }\n      this.precision = this.frame.precision;\n      this.components = this.frame.components;\n      if (!this.numBytes) {\n        this.numBytes = Math.round(Math.ceil(this.precision / 8));\n      }\n      if (this.numBytes === 1) {\n        this.mask = 255;\n      } else {\n        this.mask = 65535;\n      }\n      this.scan.read(this.stream);\n      this.numComp = this.scan.numComp;\n      this.selection = this.scan.selection;\n      if (this.numBytes === 1) {\n        if (this.numComp === 3) {\n          this.getter = this.getValueRGB;\n          this.setter = this.setValueRGB;\n          this.output = this.outputRGB;\n        } else {\n          this.getter = this.getValue8;\n          this.setter = this.setValue8;\n          this.output = this.outputSingle;\n        }\n      } else {\n        this.getter = this.getValue8;\n        this.setter = this.setValue8;\n        this.output = this.outputSingle;\n      }\n      switch (this.selection) {\n        case 2:\n          this.selector = this.select2;\n          break;\n        case 3:\n          this.selector = this.select3;\n          break;\n        case 4:\n          this.selector = this.select4;\n          break;\n        case 5:\n          this.selector = this.select5;\n          break;\n        case 6:\n          this.selector = this.select6;\n          break;\n        case 7:\n          this.selector = this.select7;\n          break;\n        default:\n          this.selector = this.select1;\n          break;\n      }\n      for (i = 0; i < this.numComp; i += 1) {\n        compN = this.scan.components[i].scanCompSel;\n        this.qTab[i] = this.quantTable.quantTables[this.components[compN].quantTableSel];\n        this.nBlock[i] = this.components[compN].vSamp * this.components[compN].hSamp;\n        this.dcTab[i] = this.HuffTab[this.scan.components[i].dcTabSel][0];\n        this.acTab[i] = this.HuffTab[this.scan.components[i].acTabSel][1];\n      }\n      this.xDim = this.frame.dimX;\n      this.yDim = this.frame.dimY;\n      if (this.numBytes === 1) {\n        this.outputData = new Uint8Array(new ArrayBuffer(this.xDim * this.yDim * this.numBytes * this.numComp));\n      } else {\n        this.outputData = new Uint16Array(new ArrayBuffer(this.xDim * this.yDim * this.numBytes * this.numComp));\n      }\n      scanNum += 1;\n      while (true) {\n        temp[0] = 0;\n        index[0] = 0;\n        for (i = 0; i < 10; i += 1) {\n          pred[i] = 1 << this.precision - 1;\n        }\n        if (this.restartInterval === 0) {\n          current = this.decodeUnit(pred, temp, index);\n          while (current === 0 && this.xLoc < this.xDim && this.yLoc < this.yDim) {\n            this.output(pred);\n            current = this.decodeUnit(pred, temp, index);\n          }\n          break;\n        }\n        for (mcuNum = 0; mcuNum < this.restartInterval; mcuNum += 1) {\n          this.restarting = mcuNum === 0;\n          current = this.decodeUnit(pred, temp, index);\n          this.output(pred);\n          if (current !== 0) {\n            break;\n          }\n        }\n        if (current === 0) {\n          if (this.markerIndex !== 0) {\n            current = 65280 | this.marker;\n            this.markerIndex = 0;\n          } else {\n            current = this.stream.get16();\n          }\n        }\n        if (!(current >= _Decoder.RESTART_MARKER_BEGIN && current <= _Decoder.RESTART_MARKER_END)) {\n          break;\n        }\n      }\n      if (current === 65500 && scanNum === 1) {\n        this.readNumber();\n        current = this.stream.get16();\n      }\n    } while (current !== 65497 && this.xLoc < this.xDim && this.yLoc < this.yDim && scanNum === 0);\n    return this.outputData;\n  }\n  decodeUnit(prev, temp, index) {\n    if (this.numComp === 1) {\n      return this.decodeSingle(prev, temp, index);\n    } else if (this.numComp === 3) {\n      return this.decodeRGB(prev, temp, index);\n    } else {\n      return -1;\n    }\n  }\n  select1(compOffset) {\n    return this.getPreviousX(compOffset);\n  }\n  select2(compOffset) {\n    return this.getPreviousY(compOffset);\n  }\n  select3(compOffset) {\n    return this.getPreviousXY(compOffset);\n  }\n  select4(compOffset) {\n    return this.getPreviousX(compOffset) + this.getPreviousY(compOffset) - this.getPreviousXY(compOffset);\n  }\n  select5(compOffset) {\n    return this.getPreviousX(compOffset) + (this.getPreviousY(compOffset) - this.getPreviousXY(compOffset) >> 1);\n  }\n  select6(compOffset) {\n    return this.getPreviousY(compOffset) + (this.getPreviousX(compOffset) - this.getPreviousXY(compOffset) >> 1);\n  }\n  select7(compOffset) {\n    return (this.getPreviousX(compOffset) + this.getPreviousY(compOffset)) / 2;\n  }\n  decodeRGB(prev, temp, index) {\n    if (this.selector === null)\n      throw new Error(\"decode hasn't run yet\");\n    let actab, dctab, qtab, ctrC, i, k, j;\n    prev[0] = this.selector(0);\n    prev[1] = this.selector(1);\n    prev[2] = this.selector(2);\n    for (ctrC = 0; ctrC < this.numComp; ctrC += 1) {\n      qtab = this.qTab[ctrC];\n      actab = this.acTab[ctrC];\n      dctab = this.dcTab[ctrC];\n      for (i = 0; i < this.nBlock[ctrC]; i += 1) {\n        for (k = 0; k < this.IDCT_Source.length; k += 1) {\n          this.IDCT_Source[k] = 0;\n        }\n        let value = this.getHuffmanValue(dctab, temp, index);\n        if (value >= 65280) {\n          return value;\n        }\n        prev[ctrC] = this.IDCT_Source[0] = prev[ctrC] + this.getn(index, value, temp, index);\n        this.IDCT_Source[0] *= qtab[0];\n        for (j = 1; j < 64; j += 1) {\n          value = this.getHuffmanValue(actab, temp, index);\n          if (value >= 65280) {\n            return value;\n          }\n          j += value >> 4;\n          if ((value & 15) === 0) {\n            if (value >> 4 === 0) {\n              break;\n            }\n          } else {\n            this.IDCT_Source[_Decoder.IDCT_P[j]] = this.getn(index, value & 15, temp, index) * qtab[j];\n          }\n        }\n      }\n    }\n    return 0;\n  }\n  decodeSingle(prev, temp, index) {\n    if (this.selector === null)\n      throw new Error(\"decode hasn't run yet\");\n    let value, i, n, nRestart;\n    if (this.restarting) {\n      this.restarting = false;\n      prev[0] = 1 << this.frame.precision - 1;\n    } else {\n      prev[0] = this.selector();\n    }\n    for (i = 0; i < this.nBlock[0]; i += 1) {\n      value = this.getHuffmanValue(this.dcTab[0], temp, index);\n      if (value >= 65280) {\n        return value;\n      }\n      n = this.getn(prev, value, temp, index);\n      nRestart = n >> 8;\n      if (nRestart >= _Decoder.RESTART_MARKER_BEGIN && nRestart <= _Decoder.RESTART_MARKER_END) {\n        return nRestart;\n      }\n      prev[0] += n;\n    }\n    return 0;\n  }\n  //\tHuffman table for fast search: (HuffTab) 8-bit Look up table 2-layer search architecture, 1st-layer represent 256 node (8 bits) if codeword-length > 8\n  //\tbits, then the entry of 1st-layer = (# of 2nd-layer table) | MSB and it is stored in the 2nd-layer Size of tables in each layer are 256.\n  //\tHuffTab[*][*][0-256] is always the only 1st-layer table.\n  //\n  //\tAn entry can be: (1) (# of 2nd-layer table) | MSB , for code length > 8 in 1st-layer (2) (Code length) << 8 | HuffVal\n  //\n  //\tHuffmanValue(table   HuffTab[x][y] (ex) HuffmanValue(HuffTab[1][0],...)\n  //\t                ):\n  //\t    return: Huffman Value of table\n  //\t            0xFF?? if it receives a MARKER\n  //\t    Parameter:  table   HuffTab[x][y] (ex) HuffmanValue(HuffTab[1][0],...)\n  //\t                temp    temp storage for remainded bits\n  //\t                index   index to bit of temp\n  //\t                in      FILE pointer\n  //\t    Effect:\n  //\t        temp  store new remainded bits\n  //\t        index change to new index\n  //\t        in    change to new position\n  //\t    NOTE:\n  //\t      Initial by   temp=0; index=0;\n  //\t    NOTE: (explain temp and index)\n  //\t      temp: is always in the form at calling time or returning time\n  //\t       |  byte 4  |  byte 3  |  byte 2  |  byte 1  |\n  //\t       |     0    |     0    | 00000000 | 00000??? |  if not a MARKER\n  //\t                                               ^index=3 (from 0 to 15)\n  //\t                                               321\n  //\t    NOTE (marker and marker_index):\n  //\t      If get a MARKER from 'in', marker=the low-byte of the MARKER\n  //\t        and marker_index=9\n  //\t      If marker_index=9 then index is always > 8, or HuffmanValue()\n  //\t        will not be called\n  getHuffmanValue(table, temp, index) {\n    let code, input;\n    const mask = 65535;\n    if (!this.stream)\n      throw new Error(\"stream not initialized\");\n    if (index[0] < 8) {\n      temp[0] <<= 8;\n      input = this.stream.get8();\n      if (input === 255) {\n        this.marker = this.stream.get8();\n        if (this.marker !== 0) {\n          this.markerIndex = 9;\n        }\n      }\n      temp[0] |= input;\n    } else {\n      index[0] -= 8;\n    }\n    code = table[temp[0] >> index[0]];\n    if ((code & _Decoder.MSB) !== 0) {\n      if (this.markerIndex !== 0) {\n        this.markerIndex = 0;\n        return 65280 | this.marker;\n      }\n      temp[0] &= mask >> 16 - index[0];\n      temp[0] <<= 8;\n      input = this.stream.get8();\n      if (input === 255) {\n        this.marker = this.stream.get8();\n        if (this.marker !== 0) {\n          this.markerIndex = 9;\n        }\n      }\n      temp[0] |= input;\n      code = table[(code & 255) * 256 + (temp[0] >> index[0])];\n      index[0] += 8;\n    }\n    index[0] += 8 - (code >> 8);\n    if (index[0] < 0) {\n      throw new Error(\"index=\" + index[0] + \" temp=\" + temp[0] + \" code=\" + code + \" in HuffmanValue()\");\n    }\n    if (index[0] < this.markerIndex) {\n      this.markerIndex = 0;\n      return 65280 | this.marker;\n    }\n    temp[0] &= mask >> 16 - index[0];\n    return code & 255;\n  }\n  getn(PRED, n, temp, index) {\n    let result, input;\n    const one = 1;\n    const n_one = -1;\n    const mask = 65535;\n    if (this.stream === null)\n      throw new Error(\"stream not initialized\");\n    if (n === 0) {\n      return 0;\n    }\n    if (n === 16) {\n      if (PRED[0] >= 0) {\n        return -32768;\n      } else {\n        return 32768;\n      }\n    }\n    index[0] -= n;\n    if (index[0] >= 0) {\n      if (index[0] < this.markerIndex && !this.isLastPixel()) {\n        this.markerIndex = 0;\n        return (65280 | this.marker) << 8;\n      }\n      result = temp[0] >> index[0];\n      temp[0] &= mask >> 16 - index[0];\n    } else {\n      temp[0] <<= 8;\n      input = this.stream.get8();\n      if (input === 255) {\n        this.marker = this.stream.get8();\n        if (this.marker !== 0) {\n          this.markerIndex = 9;\n        }\n      }\n      temp[0] |= input;\n      index[0] += 8;\n      if (index[0] < 0) {\n        if (this.markerIndex !== 0) {\n          this.markerIndex = 0;\n          return (65280 | this.marker) << 8;\n        }\n        temp[0] <<= 8;\n        input = this.stream.get8();\n        if (input === 255) {\n          this.marker = this.stream.get8();\n          if (this.marker !== 0) {\n            this.markerIndex = 9;\n          }\n        }\n        temp[0] |= input;\n        index[0] += 8;\n      }\n      if (index[0] < 0) {\n        throw new Error(\"index=\" + index[0] + \" in getn()\");\n      }\n      if (index[0] < this.markerIndex) {\n        this.markerIndex = 0;\n        return (65280 | this.marker) << 8;\n      }\n      result = temp[0] >> index[0];\n      temp[0] &= mask >> 16 - index[0];\n    }\n    if (result < one << n - 1) {\n      result += (n_one << n) + 1;\n    }\n    return result;\n  }\n  getPreviousX(compOffset = 0) {\n    if (this.getter === null)\n      throw new Error(\"decode hasn't run yet\");\n    if (this.xLoc > 0) {\n      return this.getter(this.yLoc * this.xDim + this.xLoc - 1, compOffset);\n    } else if (this.yLoc > 0) {\n      return this.getPreviousY(compOffset);\n    } else {\n      return 1 << this.frame.precision - 1;\n    }\n  }\n  getPreviousXY(compOffset = 0) {\n    if (this.getter === null)\n      throw new Error(\"decode hasn't run yet\");\n    if (this.xLoc > 0 && this.yLoc > 0) {\n      return this.getter((this.yLoc - 1) * this.xDim + this.xLoc - 1, compOffset);\n    } else {\n      return this.getPreviousY(compOffset);\n    }\n  }\n  getPreviousY(compOffset = 0) {\n    if (this.getter === null)\n      throw new Error(\"decode hasn't run yet\");\n    if (this.yLoc > 0) {\n      return this.getter((this.yLoc - 1) * this.xDim + this.xLoc, compOffset);\n    } else {\n      return this.getPreviousX(compOffset);\n    }\n  }\n  isLastPixel() {\n    return this.xLoc === this.xDim - 1 && this.yLoc === this.yDim - 1;\n  }\n  outputSingle(PRED) {\n    if (this.setter === null)\n      throw new Error(\"decode hasn't run yet\");\n    if (this.xLoc < this.xDim && this.yLoc < this.yDim) {\n      this.setter(this.yLoc * this.xDim + this.xLoc, this.mask & PRED[0]);\n      this.xLoc += 1;\n      if (this.xLoc >= this.xDim) {\n        this.yLoc += 1;\n        this.xLoc = 0;\n      }\n    }\n  }\n  outputRGB(PRED) {\n    if (this.setter === null)\n      throw new Error(\"decode hasn't run yet\");\n    const offset = this.yLoc * this.xDim + this.xLoc;\n    if (this.xLoc < this.xDim && this.yLoc < this.yDim) {\n      this.setter(offset, PRED[0], 0);\n      this.setter(offset, PRED[1], 1);\n      this.setter(offset, PRED[2], 2);\n      this.xLoc += 1;\n      if (this.xLoc >= this.xDim) {\n        this.yLoc += 1;\n        this.xLoc = 0;\n      }\n    }\n  }\n  setValue8(index, val) {\n    if (!this.outputData)\n      throw new Error(\"output data not ready\");\n    if (littleEndian) {\n      this.outputData[index] = val;\n    } else {\n      this.outputData[index] = (val & 255) << 8 | val >> 8 & 255;\n    }\n  }\n  getValue8(index) {\n    if (this.outputData === null)\n      throw new Error(\"output data not ready\");\n    if (littleEndian) {\n      return this.outputData[index];\n    } else {\n      const val = this.outputData[index];\n      return (val & 255) << 8 | val >> 8 & 255;\n    }\n  }\n  setValueRGB(index, val, compOffset = 0) {\n    if (this.outputData === null)\n      return;\n    this.outputData[index * 3 + compOffset] = val;\n  }\n  getValueRGB(index, compOffset) {\n    if (this.outputData === null)\n      throw new Error(\"output data not ready\");\n    return this.outputData[index * 3 + compOffset];\n  }\n  readApp() {\n    if (this.stream === null)\n      return null;\n    let count = 0;\n    const length = this.stream.get16();\n    count += 2;\n    while (count < length) {\n      this.stream.get8();\n      count += 1;\n    }\n    return length;\n  }\n  readComment() {\n    if (this.stream === null)\n      return null;\n    let sb = \"\";\n    let count = 0;\n    const length = this.stream.get16();\n    count += 2;\n    while (count < length) {\n      sb += this.stream.get8();\n      count += 1;\n    }\n    return sb;\n  }\n  readNumber() {\n    if (this.stream === null)\n      return null;\n    const Ld = this.stream.get16();\n    if (Ld !== 4) {\n      throw new Error(\"ERROR: Define number format throw new IOException [Ld!=4]\");\n    }\n    return this.stream.get16();\n  }\n};\nexport {\n  ComponentSpec,\n  DataStream,\n  Decoder,\n  FrameHeader,\n  HuffmanTable,\n  QuantizationTable,\n  ScanComponent,\n  ScanHeader,\n  utils_exports as Utils\n};\n//# sourceMappingURL=lossless.js.map"],
  "mappings": "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",
  "names": []
}
